export interface ResolveOptions {
    /** Directory to start resolution from. Defaults to `process.cwd()`. */
    cwd?: string;
    /** Array of file extensions to search in order */
    extensions?: string[];
}
/**
 * Add a path to the list used by `resolve()`.
 * @param pathName Path to add
 */
export declare function addResolvePath(pathName: string): void;
/**
 * Reset the list of paths used by `resolve()`.
 */
export declare function resetResolvePaths(): void;
/**
 * Exported for testing only.
 * @private
 */
export declare function _isFileNameLike(name: string): boolean;
/**
 * Exported for testing only.
 * @private
 */
export declare function _tryResolve(moduleName: string, options: ResolveOptions): string | null;
/**
 * Exported for testing only.
 * @private
 */
export declare function _getResolvePaths(cwd?: string): string[];
/**
 * Resolve a module. Resolution will be tried starting from `cwd`, the location of a config file
 * passed using the `--config` command line arg, and any paths added using `addResolvePath`.
 * @param moduleName Module name to resolve. Anything which appears to be a file name (contains .
 * and doesn't contain slashes) will be resolved relative to the working directory.
 * Other names will be resolved within node_modules.
 * @param options Resolution options, including custom cwd (defaults to `process.cwd()`)
 * @returns The module path, or null if the module can't be resolved.
 */
export declare function resolve(moduleName: string, options?: ResolveOptions): string | null;
/**
 * Resolve a module. Resolution will be tried starting from `cwd`, the location of a config file
 * passed using the `--config` command line arg, and any paths added using `addResolvePath`.
 * @deprecated Use object params signature instead.
 * @param moduleName Module name to resolve. Anything which appears to be a file name (contains .
 * and doesn't contain slashes) will be resolved relative to the working directory.
 * Other names will be resolved within node_modules.
 * @param cwd Working directory in which to start resolution. Defaults to `process.cwd()`.
 * @returns The module path, or null if the module can't be resolved.
 */
export declare function resolve(moduleName: string, cwd?: string): string | null;
/**
 * Resolve a module. Resolution will *only* be tried starting from `cwd` (does not respect
 * `--config` arg or `addResolvePath`).
 * @param moduleName Module name to resolve. Anything which appears to be a file name (contains .
 * and doesn't contain slashes) will be resolved relative to the working directory.
 * Other names will be resolved within node_modules.
 * @param options Resolution options, including custom cwd (defaults to `process.cwd()`)
 * @returns The module path, or null if the module can't be resolved.
 */
export declare function resolveCwd(moduleName: string, options?: ResolveOptions): string | null;
/**
 * Resolve a module. Resolution will *only* be tried starting from `cwd` (does not respect
 * `--config` arg or `addResolvePath`).
 * @deprecated Use object params signature instead.
 * @param moduleName Module name to resolve. Anything which appears to be a file name (contains .
 * and doesn't contain slashes) will be resolved relative to the working directory.
 * Other names will be resolved within node_modules.
 * @param cwd Working directory in which to start resolution. Defaults to `process.cwd()`.
 * @returns The module path, or null if the module can't be resolved.
 */
export declare function resolveCwd(moduleName: string, cwd?: string): string | null;
//# sourceMappingURL=resolve.d.ts.map