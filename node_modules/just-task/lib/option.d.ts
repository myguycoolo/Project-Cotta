import { Arguments } from 'yargs-parser';
export interface OptionConfig {
    /** Aliases for the argument, can be a string or array */
    alias?: string | string[];
    /** Argument should be an array */
    array?: boolean;
    /** Argument should be parsed as booleans: `{ boolean: ['x', 'y'] }`. */
    boolean?: boolean;
    /**
     * Provide a custom synchronous function that returns a coerced value from the argument provided (or throws an error), e.g.
     * `{ coerce: function (arg) { return modifiedArg } }`.
     */
    coerce?: (arg: any) => any;
    /** Indicate a key that should be used as a counter, e.g., `-vvv = {v: 3}`. */
    count?: boolean;
    /** Provide default value: `{ default: 'hello world!' }`. */
    default?: any;
    /** Specify that a key requires n arguments: `{ narg: {x: 2} }`. */
    narg?: number;
    /** `path.normalize()` will be applied to values set to this key. */
    normalize?: boolean;
    /** Keys should be treated as strings (even if they resemble a number `-x 33`). */
    string?: boolean;
    /** Keys should be treated as numbers. */
    number?: boolean;
    /** A description of the option */
    describe?: string;
}
export declare function option(key: string, options?: OptionConfig): void;
export declare function argv(): Arguments;
export declare function parseCommand(): string | null;
//# sourceMappingURL=option.d.ts.map