"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = exports.resolveConfigFile = void 0;
const fs = require("fs");
const path = require("path");
const option_1 = require("./option");
const resolve_1 = require("./resolve");
const just_task_logger_1 = require("just-task-logger");
const enableTypeScript_1 = require("./enableTypeScript");
function resolveConfigFile(args) {
    for (const entry of [args.config, './just.config.js', './just-task.js', './just.config.ts', args.defaultConfig]) {
        const configFile = resolve_1.resolve(entry);
        if (configFile) {
            return configFile;
        }
    }
    return null;
}
exports.resolveConfigFile = resolveConfigFile;
function readConfig() {
    // uses a separate instance of yargs to first parse the config (without the --help in the way) so we can parse the configFile first regardless
    const args = option_1.argv();
    const configFile = resolveConfigFile(args);
    if (configFile && fs.existsSync(configFile)) {
        const ext = path.extname(configFile);
        if (ext === '.ts' || ext === '.tsx') {
            // TODO: add option to do typechecking as well
            enableTypeScript_1.enableTypeScript({ transpileOnly: true, esm: args.esm });
        }
        try {
            const configModule = require(configFile);
            just_task_logger_1.mark('registry:configModule');
            if (typeof configModule === 'function') {
                configModule();
            }
            just_task_logger_1.logger.perf('registry:configModule');
            return configModule;
        }
        catch (e) {
            just_task_logger_1.logger.error(`Invalid configuration file: ${configFile}`);
            just_task_logger_1.logger.error(`Error: ${e.stack || e.message || e}`);
            process.exit(1);
        }
    }
    else {
        just_task_logger_1.logger.error(`Cannot find config file "${configFile}".`, `Please create a file called "just.config.js" in the root of the project next to "package.json".`);
    }
}
exports.readConfig = readConfig;
