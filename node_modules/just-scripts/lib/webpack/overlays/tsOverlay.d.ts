import * as ts from 'typescript';
import { Configuration } from 'webpack';
export interface TsLoaderOptions {
    configFile: string;
    transpileOnly: boolean;
    onlyCompileBundledFiles: boolean;
    colors: boolean;
    compilerOptions: ts.CompilerOptions;
    happyPackMode: boolean;
    getCustomTransformers: string | ((program: ts.Program) => ts.CustomTransformers | undefined);
    experimentalWatchApi: boolean;
    allowTsInNodeModules: boolean;
    experimentalFileCaching: boolean;
    projectReferences: boolean;
}
export interface TsCheckerOptions {
    typescript: string;
    tsconfig: string;
    compilerOptions: object;
    tslint: string | true | undefined;
    tslintAutoFix: boolean;
    eslint: true | undefined;
    /** Options to supply to eslint https://eslint.org/docs/1.0.0/developer-guide/nodejs-api#cliengine */
    eslintOptions: object;
    watch: string | string[];
    async: boolean;
    ignoreDiagnostics: number[];
    ignoreLints: string[];
    ignoreLintWarnings: boolean;
    reportFiles: string[];
    colors: boolean;
    silent: boolean;
    checkSyntacticErrors: boolean;
    memoryLimit: number;
    workers: number;
    vue: boolean;
    useTypescriptIncrementalApi: boolean;
    measureCompilationTime: boolean;
    resolveModuleNameModule: string;
    resolveTypeReferenceDirectiveModule: string;
}
export interface TsOverlayOptions {
    loaderOptions?: Partial<TsLoaderOptions>;
    checkerOptions?: Partial<TsCheckerOptions>;
}
export declare const tsOverlay: (overlayOptions?: TsOverlayOptions | undefined) => Partial<Configuration>;
//# sourceMappingURL=tsOverlay.d.ts.map