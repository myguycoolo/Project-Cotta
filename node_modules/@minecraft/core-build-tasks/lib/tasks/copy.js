"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyTask = void 0;
const path_1 = __importDefault(require("path"));
const copyFiles_1 = require("./helpers/copyFiles");
const getOrThrowFromProcess_1 = require("./helpers/getOrThrowFromProcess");
const getGameDeploymentRootPaths_1 = require("./helpers/getGameDeploymentRootPaths");
const BehaviorPacksPath = 'development_behavior_packs';
const ResourcePacksPath = 'development_resource_packs';
/**
 * A just task which copies files to a specified output location.
 * Where there may be multiple output paths, and for each output path there may be multiple files.
 */
function copyTask(params) {
    return () => {
        const projectName = (0, getOrThrowFromProcess_1.getOrThrowFromProcess)('PROJECT_NAME');
        let deploymentPath = undefined;
        try {
            const product = (0, getOrThrowFromProcess_1.getOrThrowFromProcess)('MINECRAFT_PRODUCT');
            deploymentPath = (0, getGameDeploymentRootPaths_1.getGameDeploymentRootPaths)()[product];
        }
        catch (_) {
            throw new Error('Unable to get deployment path. Make sure to configure package root correctly.');
        }
        if (deploymentPath === undefined) {
            throw new Error('Deployment path is undefined. Make sure to configure package root correctly.');
        }
        (0, copyFiles_1.copyFiles)(params.copyToBehaviorPacks, path_1.default.join(deploymentPath, BehaviorPacksPath, projectName));
        (0, copyFiles_1.copyFiles)(params.copyToScripts, path_1.default.join(deploymentPath, BehaviorPacksPath, projectName, 'scripts'));
        if (params.copyToResourcePacks) {
            (0, copyFiles_1.copyFiles)(params.copyToResourcePacks, path_1.default.join(deploymentPath, ResourcePacksPath, projectName));
        }
    };
}
exports.copyTask = copyTask;
//# sourceMappingURL=copy.js.map