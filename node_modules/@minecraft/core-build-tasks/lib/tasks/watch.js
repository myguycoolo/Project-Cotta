"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchTask = void 0;
const just_scripts_1 = require("just-scripts");
const WATCH_TASK_NAME = 'watch-task';
(0, just_scripts_1.option)('watch');
/**
 * If command line parameter `option` is present, watch for changes in the specified files and run the specified task.
 * Otherwise, just run the task.
 * @param globs The file globs to watch.
 * @param taskFunction The task to run when changes are detected.
 */
function watchTask(globs, taskFunction) {
    return () => {
        if (!(0, just_scripts_1.argv)().watch) {
            return taskFunction;
        }
        let taskInProgress = true;
        let pendingWork = false;
        const onFinished = (args) => {
            if (args.name === WATCH_TASK_NAME) {
                if (pendingWork) {
                    just_scripts_1.logger.info('Processing pending changes...');
                    pendingWork = false;
                    origTask.call();
                }
                else {
                    just_scripts_1.logger.info('Waiting for new changes...');
                    taskInProgress = false;
                }
            }
        };
        just_scripts_1.undertaker.on('start', function (args) {
            if (args.name === WATCH_TASK_NAME) {
                taskInProgress = true;
            }
        });
        just_scripts_1.undertaker.on('stop', function (args) {
            onFinished(args);
        });
        just_scripts_1.undertaker.on('error', function (args) {
            onFinished(args);
        });
        (0, just_scripts_1.task)(WATCH_TASK_NAME, (0, just_scripts_1.series)(taskFunction));
        let origTask = (0, just_scripts_1.series)(WATCH_TASK_NAME);
        // Start execution.
        origTask.call();
        (0, just_scripts_1.watch)(globs, () => {
            if (!taskInProgress) {
                origTask.call();
            }
            else {
                pendingWork = true;
            }
        });
        return Promise.resolve();
    };
}
exports.watchTask = watchTask;
//# sourceMappingURL=watch.js.map