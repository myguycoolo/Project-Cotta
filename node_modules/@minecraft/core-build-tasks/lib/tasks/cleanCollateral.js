"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanCollateralTask = exports.STANDARD_CLEAN_PATHS = void 0;
const fs = __importStar(require("fs"));
const Path = __importStar(require("path"));
const rimraf_1 = __importDefault(require("rimraf"));
const getOrThrowFromProcess_1 = require("./helpers/getOrThrowFromProcess");
exports.STANDARD_CLEAN_PATHS = [
    'LOCALAPPDATA/Packages/Microsoft.MinecraftUWP_8wekyb3d8bbwe/LocalState/games/com.mojang/development_behavior_packs/PROJECT_NAME',
    'LOCALAPPDATA/Packages/Microsoft.MinecraftUWP_8wekyb3d8bbwe/LocalState/games/com.mojang/development_resource_packs/PROJECT_NAME',
    'LOCALAPPDATA/Packages/Microsoft.MinecraftWindowsBeta_8wekyb3d8bbwe/LocalState/games/com.mojang/development_behavior_packs/PROJECT_NAME',
    'LOCALAPPDATA/Packages/Microsoft.MinecraftWindowsBeta_8wekyb3d8bbwe/LocalState/games/com.mojang/development_resource_packs/PROJECT_NAME',
];
/**
 * Cleans the specified outputs. Outputs could be either folders or files. Has support for the following variable replacements
 *
 *   APPDATA, LOCALAPPDATA, PROJECT_NAME
 *
 * This constant is replaced at task execution with a value provided by the process environment.
 *
 */
function cleanCollateralTask(pathsToClean) {
    return () => {
        const projectName = (0, getOrThrowFromProcess_1.getOrThrowFromProcess)('PROJECT_NAME');
        // The following variables are not used on all platforms. In those cases, set up an error token so that if the
        // config requires these on the platform, we error out immediately.
        const errorToken = '$ERROR_TOKEN$';
        let appData = process.env.APPDATA;
        if (!appData) {
            console.warn('Proceeding without APPDATA on this platform. File copy will fail if APPDATA is required.');
            appData = errorToken;
        }
        let localAppData = process.env.LOCALAPPDATA;
        if (!localAppData) {
            console.warn('Proceeding without LOCALAPPDATA on this platform. File copy will fail if LOCALAPPDATA is required.');
            localAppData = errorToken;
        }
        // For each output path, replace tokens with env values
        for (const cleanPathRaw of pathsToClean) {
            const cleanPath = cleanPathRaw
                .replace('LOCALAPPDATA', localAppData)
                .replace('APPDATA', appData)
                .replace('PROJECT_NAME', projectName);
            if (cleanPath.includes(errorToken)) {
                console.warn(`Skipping clean of ${cleanPath} on current platform due to APPDATA or LOCALAPPDATA being missing.`);
                continue;
            }
            try {
                const stats = fs.statSync(cleanPath);
                console.log(`Cleaning ${stats.isDirectory() ? 'directory' : 'file'} ${Path.resolve(cleanPath)}.`);
                rimraf_1.default.sync(cleanPath);
            }
            catch (_) {
                // File or directory did not exist, so we no-op
            }
        }
    };
}
exports.cleanCollateralTask = cleanCollateralTask;
//# sourceMappingURL=cleanCollateral.js.map